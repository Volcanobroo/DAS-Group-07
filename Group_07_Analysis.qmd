---
title: "DAS Group Project 2"
author: "Group 7"
number-sections: true
format: 
  html:
    embed-resources: true
    code-tools: true
  pdf: 
    fig-pos: "H"
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  eval: true
  warning: false
  message: false
---

```{r}
#| label: libraries
library(ggplot2)
library(tidyverse)
library(gt)
library(patchwork)
library(gridExtra)
library(moderndive)
library(GGally)
library(corrplot)
library(caret)
library(pROC)
```

```{r}
#| label: data
data <- read.csv("/Users/ziluwang/Documents/GitHub/DAS-Project2-Group7/dataset07.csv", na.strings = 'NA')
```

# Introduction {#sec-intro}

Introduction paragraph

# Exploratory Data Analysis {#sec-EDA}

```{r}
# Check for missing values
colSums(is.na(data))
```

```{r}
# Data wrangling
data$length[is.na(data$length)] <- median(data$length, na.rm = TRUE)
# Creating a new binary variable
data$above_7 <- ifelse(data$rating > 7, 1, 0)
```

```{r}
glimpse(data)
```

```{r}
# Summary statistics for each variable
summary_stats <- summary(data)
print(summary_stats)
```

```{r fig.width=6, fig.height=8}
# List of numeric variables
numeric_vars <- c("year", "length", "budget", "votes", "rating")

# Titles and x-axis labels for the histograms
titles <- c("Distribution of Years", "Distribution of Film Lengths",
            "Distribution of Budgets", "Distribution of Votes", "Distribution of Ratings")
x_labels <- c("Year", "Length (minutes)", "Budget (millions $)", "Votes", "Rating")

# Loop through numeric variables to create histograms
par(mfrow = c(3, 2)) # Adjust grid layout based on number of variables
for (i in 1:length(numeric_vars)) {
  hist(data[[numeric_vars[i]]], main = titles[i], xlab = x_labels[i], border = 'white')
}
par(mfrow = c(1, 1)) # Reset to default layout

```

```{r fig.width=6, fig.height=8}
numeric_vars <- c("year", "length", "budget", "votes", "rating")
# Set up plotting area
par(mfrow = c(3, 2))  # Adjust dimensions as necessary based on the number of variables

# Loop through numeric variables to create boxplots
for (var in numeric_vars) {
    # Create boxplot for each numeric variable
    boxplot(data[[var]], main = paste("Distribution of", var), ylab = var)
}

# Reset plotting area to default
par(mfrow = c(1, 1))
```

```{r}
# Bar plot for genre
genre_counts <- table(data$genre)
barplot(genre_counts, main = "Film Counts by Genre", xlab = "Genre", ylab = "Count", las = 2)
```

```{r}
# Pairwise correlation between numeric variables
numeric_data <- dplyr::select(data, -film_id, -genre, -above_7)  # Remove non-numeric and unnecessary columns for correlation
cor_matrix <- cor(numeric_data, use = "complete.obs")  # Compute correlation matrix
corrplot(cor_matrix, type = "upper", order = "hclust", 
         tl.cex = 0.6, tl.col = "black", addCoef.col = "blue") 
```

```{r fig.width=6, fig.height=8}
# Set up the layout for multiple plots
par(mfrow = c(3, 2))  # Adjust as necessary based on the number of variables

# Loop through numeric variables to create boxplots
for (var in numeric_vars) {
    formula = as.formula(paste(var, "~ above_7"))  # Construct formula for plotting
    boxplot(formula, data = data,
            main = paste(var, "vs. Above_7"),
            xlab = "Above 7", ylab = var)
}

# Reset the layout
par(mfrow = c(1, 1))
```

```{r}
# Recalculate proportions if necessary
genre_counts <- table(data$above_7, data$genre)
genre_proportions <- prop.table(genre_counts, 2)  # Calculate row-wise proportions

# Create the barplot
barplot(genre_proportions, legend = TRUE,
        main = "Proportion of Ratings Above 7 by Genre",
        xlab = "Genre", ylab = "Proportion",
        names.arg = colnames(genre_counts))  # Use column names of the original counts table
```

# Formal Data Analysis {#sec-FDA}
```{r}
data_clean <- dplyr::select(data, -film_id, -rating)
data_clean$length_log <- log1p(data_clean$length)
data_clean$votes_log <- log1p(data_clean$votes)
```

```{r}
# split train and test dataset 
set.seed(123)  # for reproducibility
index <- createDataPartition(data_clean$above_7, p = .70, list = FALSE)
train_data <- data_clean[index, ]
test_data <- data_clean[-index, ]
```

```{r}
#Test the full model without processing
glm_model <- glm(above_7 ~ year + length + budget + votes + genre, 
                 family = binomial, data = train_data)
summary(glm_model)
# Predict on the test data
predictions <- predict(glm_model, test_data, type = "response")
predicted_class <- ifelse(predictions > 0.32, 1, 0)
conf_matrix <- confusionMatrix(factor(predicted_class), factor(test_data$above_7))
accuracy <- conf_matrix$overall['Accuracy']
sensitivity <- conf_matrix$byClass['Sensitivity']
specificity <- conf_matrix$byClass['Specificity']

# Print the metrics
print(accuracy)
print(sensitivity)
print(specificity)
roc_response <- roc(response = test_data$above_7, predictor = predictions)
plot(roc_response)
auc(roc_response)
```


```{r}
#Full model with log transformation
glm_model <- glm(above_7 ~ year + length_log + budget + votes_log + genre, 
                 family = binomial, data = train_data)
summary(glm_model)
# Predict on the test data
predictions <- predict(glm_model, test_data, type = "response")
predicted_class <- ifelse(predictions > 0.32, 1, 0)
conf_matrix <- confusionMatrix(factor(predicted_class), factor(test_data$above_7))
accuracy <- conf_matrix$overall['Accuracy']
sensitivity <- conf_matrix$byClass['Sensitivity']
specificity <- conf_matrix$byClass['Specificity']

# Print the metrics
print(accuracy)
print(sensitivity)
print(specificity)
roc_response <- roc(response = test_data$above_7, predictor = predictions)
plot(roc_response)
auc(roc_response)
```


```{r}
# Remove year
glm_model <- glm(above_7 ~ length_log + budget + votes_log + genre, 
                 family = binomial, data = train_data)
summary(glm_model)
# Predict on the test data
predictions <- predict(glm_model, test_data, type = "response")
predicted_class <- ifelse(predictions > 0.32, 1, 0)
conf_matrix <- confusionMatrix(factor(predicted_class), factor(test_data$above_7))
accuracy <- conf_matrix$overall['Accuracy']
sensitivity <- conf_matrix$byClass['Sensitivity']
specificity <- conf_matrix$byClass['Specificity']

# Print the metrics
print(accuracy)
print(sensitivity)
print(specificity)
roc_response <- roc(response = test_data$above_7, predictor = predictions)
plot(roc_response)
auc(roc_response)
```

```{r}
# Remove year and votes_log
glm_model <- glm(above_7 ~ length_log + budget + genre, 
                 family = binomial, data = train_data)
summary(glm_model)
# Predict on the test data
predictions <- predict(glm_model, test_data, type = "response")
predicted_class <- ifelse(predictions > 0.32, 1, 0)
conf_matrix <- confusionMatrix(factor(predicted_class), factor(test_data$above_7))
accuracy <- conf_matrix$overall['Accuracy']
sensitivity <- conf_matrix$byClass['Sensitivity']
specificity <- conf_matrix$byClass['Specificity']

# Print the metrics
print(accuracy)
print(sensitivity)
print(specificity)
roc_response <- roc(response = test_data$above_7, predictor = predictions)
plot(roc_response)
auc(roc_response)
```

# Conclusions {#sec-conc}



# Reference {#sec-ref}
